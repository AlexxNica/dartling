Good API Designing by Joshua Bloch

http://richardminerich.com/2012/08/what-is-good-api-design/
http://lcsd05.cs.tamu.edu/slides/keynote.pdf
http://www.youtube.com/watch?v=aAb7hSCtvGw
http://hash-table.com/home/2012/07/20/how-to-design-a-good-api-and-why-it-matters/
http://techvivek.wordpress.com/2011/09/16/good-api-designing-by-joshua-bloch/
http://coding.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/

abstract class RepoApi {

  add(DomainModelsApi domainModels);
  Domains get domains;
  DomainModelsApi getDomainModels(String domainCode);
  gen([bool specific=true]);

}

abstract class DomainModelsApi implements SourceOfActionReactionApi {

  add(ModelEntriesApi modelEntries);
  Domain get domain;
  Model getModel(String modelCode);
  ModelEntriesApi getModelEntries(String modelCode);
  DomainSessionApi newSession();

}

abstract class DomainSessionApi {

  DomainModelsApi get domainModels;
  PastApi get past;
}

abstract class ModelEntriesApi {

  Model get model;
  Concept getConcept(String conceptCode);
  EntitiesApi getEntry(String entryConceptCode);
  EntityApi find(Oid oid);
  EntityApi findInInternalTree(Concept entryConcept, Oid oid);

  bool get empty;
  clear();

  String toJson();
  fromJson(String json);

}

abstract class EntitiesApi<T extends EntityApi<T>> implements Iterable<T> {

  Concept get concept;
  EntitiesApi<T> get source;
  ErrorsApi get errors;
  int get count;
  bool get empty;
  void clear();

  bool preAdd(T entity);
  bool add(T entity);
  bool postAdd(T entity);
  bool preRemove(T entity);
  bool remove(T entity);
  bool postRemove(T entity);

  void forEach(Function f);
  bool every(Function f);
  bool some(Function f);

  bool contains(T entity);
  T first();
  T last();
  T random();
  T find(Oid oid);
  T deepFind(Oid oid);
  T findByCode(String code);
  T findById(IdApi id);
  T findByAttributeId(String code, Object attribute);
  T findByAttribute(String code, Object attribute);

  EntitiesApi<T> select(Function f);
  EntitiesApi<T> selectByParent(String code, Object parent);
  EntitiesApi<T> selectByAttribute(String code, Object attribute);
  EntitiesApi<T> order();
  EntitiesApi<T> orderByFunction(Function f);

  EntitiesApi<T> copy();
  List<T> get list;
  List<Map<String, Object>> toJson();

}

abstract class EntityApi<T extends EntityApi<T>> implements Comparable {

  Concept get concept;
  ErrorsApi get errors;
  String get code;
  void set code(String code);

  Object getAttribute(String name);
  bool setAttribute(String name, Object value);
  String getStringFromAttribute(String name);
  bool setStringToAttribute(String name, String string);
  EntityApi getParent(String name);
  bool setParent(String name, EntityApi entity);
  EntitiesApi getChild(String name);
  bool setChild(String name, EntitiesApi entities);

  IdApi get id;
  T copy();
  Map<String, Object> toJson();

}

abstract class IdApi implements Comparable {

  Concept get concept;

  int get parentCount;
  int get attributeCount;

  EntityApi getParent(String code);
  setParent(String code, EntityApi parent);

  Object getAttribute(String code);
  setAttribute(String code, Object attribute);

}

abstract class ErrorsApi {

  int get count;
  List<EntityError> get list;
  add(EntityError error);
  clear();

}

abstract class ActionApi {

  bool doit();
  bool undo();
  bool redo();

}

abstract class TransactionApi extends ActionApi {

  add(ActionApi action);

}

abstract class PastApi implements SourceOfPastReactionApi {

  add(ActionApi action);
  clear();
  bool get empty;

  bool doit();
  bool undo();
  bool redo();

}

abstract class SourceOfActionReactionApi {

  startActionReaction(ActionReactionApi reaction);
  cancelActionReaction(ActionReactionApi reaction);
  notifyActionReactions(ActionApi action);
  
}

abstract class SourceOfPastReactionApi {

  startPastReaction(PastReactionApi reaction);
  cancelPastReaction(PastReactionApi reaction);
  notifyNoPast();
  notifyYesPast();
  
}

abstract class ActionReactionApi {

  react(ActionApi action);
  
}

abstract class PastReactionApi {

  reactNoPast();
  reactYesPast();
  
}


