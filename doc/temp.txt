
  
  Entities<T> selectByFunction(Function f) {
    List<T> filteredList = _entityList.filter(f);
    // need to use reflection to create specific entities based on the concept
    Entities<T> selectedEntities = new Entities.of(_concept);
    filteredList.forEach((e) => selectedEntities.add(e));
    selectedEntities._sourceEntities = this;
    return selectedEntities;
  }

  Entities<T> copy() {
    // need to use reflection to create specific entities based on the concept
    Entities<T> ce = new Entities.of(_concept);
    _entityList.forEach((e) => ce.add(e));
  }
  
  int compareTo(T entity) {
    if (code != null) {
      return _code.compareTo(entity.code);
    }
    var id = getId();
    if (id.count > 0) {
      return id.compareTo(entity.getId());
    }
    throw new Exception('compare to: both code and id are not used.');
  }
  
  /**
   * Compares two ids. If the result is less than 0 then
   * the first id is less than the second, if it is equal to 0 they are
   * equal and if the result is greater than 0 then the first is greater than
   * the second.
   */
  int compareTo(Id other) {
    // to do
      return 0;
  }
  
  T getEntityByPosition(int position) {
    if (position >= 0 && position < count) {
      return _entityList[position];
    } else {
      throw new SearchException('Position must be between 0 and count - 1.');
    }
  }
  
  T getEntityByCode(String code) {
    if (_codeEntityMap.containsKey(code)) {
      return _codeEntityMap[code];
    } else {
      for (T element in _entityList) {
        if (element.code == code) {
         return element;
        }
      }
      return null;
    }
  }
  
  class AttributeValue {

  Attribute _attribute;
  Object _object;

  AttributeValue(this._attribute, this._object);

  Attribute get attribute() => _attribute;
  Object get object() => _object;
  String get string() => _object;

  /**
   * Checks if the value is equal to the given object.
   * If the given object is not of the AttributeValue type,
   * two objects cannot be equal. Two values are
   * equal if they have the same attribute and are ==.
   */
   bool equals(other) {
     if (other is AttributeValue) {
       if (_attribute != other.attribute) {
         return false;
       }
       if (_object != other.object) {
         return false;
       }
     } else {
       return false;
     }
     return true;
   }

  /**
   * Compares two attribute values based on types.
   * If the result is less than 0 then the first value is less than the second,
   * if it is equal to 0 they are equal and
   * if the result is greater than 0 then the first is greater than the second.
   */
  int compareTo(AttributeValue value) {
    if (_attribute.type.base == 'String') {
      if (_object is String) {
        return string.compareTo(value.string);
      } else {
        String msg =
            '${_attribute.concept.code}.${_attribute.code} is not of String type.';
        throw new TypeException(msg);
      }
    }
    return 0;
  }

  /**
   * Returns a string that represents this attribute value.
   */
  String toString() {
    return '${_object.toString()}';
  }

}

  T getEntityById(Id id) {
    if (id.count == 0) {
      return null;
    }
    if (_concept == null) {
      throw new ConceptException('Entities concept is not defined.');
    }
    for (T entity in _entityList) {
      var found = true;
      if (id.parentCount > 0) {
        for (Parent p in _concept.parents) {
          if (p.id) {
            if (entity.getParent(p.code) != id.getParent(p.code)) {
              found = false;
              break;
            }
          }
        }
      }
      if (found && id.attributeCount > 0) {
        for (Attribute a in _concept.attributes) {
          if (a.id) {
            if (entity.getAttribute(a.code) != id.getAttribute(a.code)) {
              found = false;
              break;
            }
          }
        }
      }
      if (found) {
        return entity;
      }
    }
    return null;
  }
  

  
  
  
  
  
  