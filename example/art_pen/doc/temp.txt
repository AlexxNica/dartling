
_double2() {
    if (!segments.empty) {
      if (lastLine != null) {
        segments.display('segments');
        var copiedSegments = segments.copy();
        copiedSegments.concept.updateOid = true;
        for (Segment copiedSegment in copiedSegments) {
          copiedSegment.oid = new Oid();
          Lines copiedLines = copiedSegment.lines.copy();
          assert(copiedLines.last() !== copiedSegment.lines.last());
          copiedLines.display('copiedLines');
          assert(copiedLines.count == copiedSegment.lines.count);
          copiedSegment.lines.clear();
          bool addedFrom = copiedSegment.lines.addFrom(copiedLines);
          assert(addedFrom);
          assert(copiedLines.last() === copiedSegment.lines.last());
        }
        copiedSegments.concept.updateOid = false;
        assert(segments.count == copiedSegments.count);
        assert(segments.last().lines.last() !== copiedSegments.last().lines.last());

        lastSegment = segments.last();
        lastLine = lastSegment.lines.last();
        var previousLine = lastLine;
        for (Segment copiedSegment in copiedSegments) {
          copiedSegment.lines.concept.updateOid = true;
          for (Line copiedLine in copiedSegment.lines) {
            copiedLine.oid = new Oid();
            copiedLine.segment = copiedSegment;
            copiedLine.previousLine = previousLine;
            copiedLine.beginX = previousLine.endX;
            copiedLine.beginY = previousLine.endY;
            //copiedLine.cumulativeAngle = previousLine.cumulativeAngle + copiedLine.angle;
            copiedLine.angle = copiedLine.angle;
            previousLine = copiedLine;
          }
          copiedSegment.lines.concept.updateOid = false;
        }
        lastLine = previousLine;

        bool addedFrom = segments.addFrom(copiedSegments);
        lastSegment = copiedSegments.last();
        assert(addedFrom);
        segments.errors.display('Errors in segments after addFrom');
        assert(segments.count == 2 * copiedSegments.count);

        //segments.display('segments');
        //copiedSegments.display('copiedSegments');
        //lastSegment = segments.last();
        //lastLine = lastSegment.lines.last();
      }
    }
  }

  _double1() {
    if (!segments.empty) {
      if (lastLine != null) {
        var copiedSegments = segments.copy();
        copiedSegments.concept.updateOid = true;
        for (Segment copiedSegment in copiedSegments) {
          copiedSegment.oid = new Oid();
          var copiedLines = copiedSegment.lines.copy();
          assert(copiedLines.count == copiedSegment.lines.count);
          copiedSegment.lines.clear();
          copiedSegment.display('copiedSegment.lines.clear');
          bool addedFrom = copiedSegment.lines.addFrom(copiedLines);
          assert(addedFrom);
          copiedSegment.display('copiedSegment.lines.addFrom');
          copiedSegment.lines.errors.display('Errors in copiedSegment.lines after addFrom');
        }
        copiedSegments.concept.updateOid = false;
        assert(segments.count == copiedSegments.count);
        Segment lastSegment = segments.last();
        if (!lastSegment.lines.empty) {
          lastLine = lastSegment.lines.last();
        }
        var previousLine = lastLine;
        for (Segment copiedSegment in copiedSegments) {
          copiedSegment.lines.concept.updateOid = true;
          for (Line copiedLine in copiedSegment.lines) {
            copiedLine.oid = new Oid();
            copiedLine.segment = copiedSegment;
            copiedLine.previousLine = previousLine;
            copiedLine.beginX = previousLine.endX;
            copiedLine.beginY = previousLine.endY;
            copiedLine.angle = copiedLine.angle;
            previousLine = copiedLine;
          }
          copiedSegment.lines.concept.updateOid = false;
        }
        lastLine = previousLine;
        bool addedFrom = segments.addFrom(copiedSegments);
        lastSegment = copiedSegments.last();
        assert(addedFrom);
        segments.errors.display('Errors in segments after addFrom');
        assert(segments.count == 2 * copiedSegments.count);
        segments.display();
        lastSegment = segments.last();
        lastLine = lastSegment.lines.last();
      }
    }
  }

  _double0() {
    if (!segments.empty) {
      var previousLine = lastLine;
      if (previousLine != null) {
        var copiedSegments = segments.copy();
        for (Segment copiedSegment in copiedSegments) {
          //copiedSegment.oid = new Oid();
          var copiedLines = copiedSegment.lines.copy();
          assert(copiedLines.count == copiedSegment.lines.count);
          for (Line copiedLine in copiedLines) {
            //copiedLine.oid = new Oid();
            copiedLine.previousLine = previousLine;
            copiedLine.beginX = previousLine.endX;
            copiedLine.beginY = previousLine.endY;
            copiedLine.angle = copiedLine.angle;
            copiedLine.segment = copiedSegment;
            previousLine = copiedLine;
          }
          copiedSegment.lines.clear();
          bool addedFrom = copiedSegment.lines.addFrom(copiedLines);
          assert(addedFrom);
          copiedSegment.lines.errors.display('Errors in copiedSegment.lines after addFrom');
          //assert(copiedSegment.lines.count == copiedLines.count);
          /*
          copiedSegment.lines.clear();
          for (Line copiedLine in copiedLines) {
            copiedSegment.lines.add(copiedLine);
            copiedLine.segment = copiedSegment;
            copiedLine.previousLine = previousLine;
            copiedLine.beginX = previousLine.endX;
            copiedLine.beginY = previousLine.endY;
            copiedLine.angle = copiedLine.angle + randomDouble(9.99);
            previousLine = copiedLine;
          }
          */
          /*
          for (Line copiedLine in copiedSegment.lines) {
            copiedLine.segment = copiedSegment;
            copiedLine.previousLine = previousLine;
            copiedLine.beginX = previousLine.endX;
            copiedLine.beginY = previousLine.endY;
            copiedLine.angle = copiedLine.angle; // + randomDouble(9.99);
            previousLine = copiedLine;
          }
          */
        }
        assert(segments.count == copiedSegments.count);
        bool addedFrom = segments.addFrom(copiedSegments);
        assert(addedFrom);
        segments.errors.display('Errors in segments after addFrom');
        /*
        for (Segment copiedSegment in copiedSegments) {
          segments.add(copiedSegment);
        }
        */
        assert(segments.count == 2 * copiedSegments.count);
        segments.display();
        lastSegment = segments.last();
        lastLine = lastSegment.lines.last();
      }
    }
  }
  